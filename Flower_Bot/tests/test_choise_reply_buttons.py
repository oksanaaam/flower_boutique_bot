import unittest
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from keyboards.reply.choise_reply_buttons import (
    Start,
    Location,
    Menu,
    Box,
    Bouquet,
    Order,
    Immediately_delivery_time,
    Contact,
    Each,
    Confirmation_location,
    Confirmation_style,
    Admin_panel_buttons,
    Admin_post_advertisement,
    Admin_change_cost,
    Admin_back_to_choosing_roses,
    Admin_orders_markup,
    Admin_check_comments,
    Admin_bouquet_price,
    Admin_bouquet_photo,
    Settings,
    change_language,
    change_language_begin,
    last_agree,
    keyboards_reply,
)


class TestChoiceReplyButtons(unittest.TestCase):
    def test_start_buttons(self):
        buttons = [button.text for row in Start.keyboard for button in row]
        expected_buttons = [
            "üåπ –ú–µ–Ω—é",
            "üì• –ö–æ—Ä–∑–∏–Ω–∞",
            "‚úçÔ∏è –ó–∞–ª–∏—à–∏—Ç–∏ –∫–æ–º–µ–Ω—Ç–∞—Ä",
            "‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è",
        ]
        self.assertEqual(buttons, expected_buttons)

    def test_location_buttons(self):
        buttons = [button.text for row in Location.keyboard for button in row]
        self.assertIn("‚¨Ö –ù–∞–∑–∞–¥ –¥–æ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —á–∞—Å—É", buttons)

    def test_menu_buttons(self):
        buttons = [button.text for row in Menu.keyboard for button in row]
        expected_buttons = [
            "ü•° –ö–≤—ñ—Ç–∏ –≤ –±–æ–∫—Å—ñ",
            "üíê –ö–≤—ñ—Ç–∏ –≤ –±—É–∫–µ—Ç—ñ",
            "üì• –ö–æ—Ä–∑–∏–Ω–∞",
            "‚¨Ö –ù–∞–∑–∞–¥",
        ]
        self.assertEqual(buttons, expected_buttons)

    def test_box_buttons(self):
        buttons = [button.text for row in Box.keyboard for button in row]
        expected_buttons = ["üì• –ö–æ—Ä–∑–∏–Ω–∞", "‚¨Ö –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –¥–æ –º–µ–Ω—é"]
        self.assertEqual(buttons, expected_buttons)

    def test_bouquet_buttons(self):
        buttons = [button.text for row in Bouquet.keyboard for button in row]
        expected_buttons = [
            "101",
            "201",
            "301",
            "401",
            "501",
            "601",
            "701",
            "1001",
            "üì• –ö–æ—Ä–∑–∏–Ω–∞",
            "‚¨Ö –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –¥–æ –º–µ–Ω—é",
        ]
        self.assertEqual(buttons, expected_buttons)

    def test_order_buttons(self):
        buttons = [button.text for row in Order.keyboard for button in row]
        expected_buttons = [
            "üì≠ –Ø–∫–Ω–∞–π—à–≤–∏–¥—à–∞ –¥–æ—Å—Ç–∞–≤–∫–∞",
            "‚è± –û–±—Ä–∞—Ç–∏ —á–∞—Å –¥–æ—Å—Ç–∞–≤–∫–∏",
            "‚¨Ö –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –¥–æ –º–µ–Ω—é",
        ]
        self.assertEqual(buttons, expected_buttons)

    def test_immediately_delivery_time_buttons(self):
        buttons = [
            button.text for row in Immediately_delivery_time.keyboard for button in row
        ]
        expected_buttons = ["üì≤ –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É", "‚¨Ö –ù–∞–∑–∞–¥"]
        self.assertEqual(buttons, expected_buttons)

    def test_contact_buttons(self):
        buttons = [button.text for row in Contact.keyboard for button in row]
        expected_buttons = ["üì≤ –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É", "‚¨Ö –ù–∞–∑–∞–¥ –¥–æ –ª–æ–∫–∞—Ü—ñ—ó"]
        self.assertEqual(buttons, expected_buttons)

    def test_each_buttons(self):
        buttons = [button.text for row in Each.keyboard for button in row]
        expected_buttons = ["üì• –ö–æ—Ä–∑–∏–Ω–∞", "‚¨Ö –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –¥–æ –±—É–∫–µ—Ç—ñ–≤"]
        self.assertEqual(buttons, expected_buttons)

    def test_confirmation_location_buttons(self):
        buttons = [
            button.text for row in Confirmation_location.keyboard for button in row
        ]
        expected_buttons = ["‚úÖ –¢–∞–∫", "‚ùå –ù—ñ", "‚¨Ö –ù–∞–∑–∞–¥"]
        self.assertEqual(buttons, expected_buttons)

    def test_confirmation_style_buttons(self):
        buttons = [button.text for row in Confirmation_style.keyboard for button in row]
        expected_buttons = ["‚úÖ –¢–∞–∫", "‚ùå –ù—ñ"]
        self.assertEqual(buttons, expected_buttons)

    def test_admin_panel_buttons(self):
        buttons = [
            button.text for row in Admin_panel_buttons.keyboard for button in row
        ]
        expected_buttons = [
            "üÜï –ù–æ–≤—ñ –∫–ª—ñ—î–Ω—Ç–∏",
            "üì¢ –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è",
            "üí∏ –ó–º—ñ–Ω–∏—Ç–∏ —Ü—ñ–Ω—É",
            "üñºÔ∏è –ó–º—ñ–Ω–∏—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è",
            "‚úçÔ∏è –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ",
        ]
        self.assertEqual(buttons, expected_buttons)

    def test_admin_post_advertisement_buttons(self):
        buttons = [
            button.text for row in Admin_post_advertisement.keyboard for button in row
        ]
        self.assertIn("‚¨Ö –ù–∞–∑–∞–¥", buttons)

    def test_admin_change_cost_buttons(self):
        buttons = [button.text for row in Admin_change_cost.keyboard for button in row]
        expected_buttons = [
            "ü•° –í–∞—Ä—Ç—ñ—Å—Ç—å –∫–æ—Ä–æ–±–∫–∏",
            "üíê –í–∞—Ä—Ç—ñ—Å—Ç—å –±—É–∫–µ—Ç–∞",
            "‚¨Ö –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –º–µ–Ω—é",
        ]
        self.assertEqual(buttons, expected_buttons)

    def test_admin_back_to_choosing_roses_buttons(self):
        buttons = [
            button.text
            for row in Admin_back_to_choosing_roses.keyboard
            for button in row
        ]
        self.assertIn("‚¨Ö –ù–∞–∑–∞–¥", buttons)

    def test_admin_orders_markup_buttons(self):
        buttons = [
            button.text for row in Admin_orders_markup.keyboard for button in row
        ]
        expected_buttons = [
            "–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–ª—ñ—î–Ω—Ç—ñ–≤ –∑–∞ –¥–µ–Ω—å",
            "–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–º–æ–≤–ª–µ–Ω—å –∑–∞ –æ—Å—Ç–∞–Ω–Ω—é –≥–æ–¥–∏–Ω—É",
            "–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–ª—ñ—î–Ω—Ç—ñ–≤ –∑–∞ —Ç—Ä–∏ –¥–Ω—ñ",
            "–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ—Å—Ç–∞–Ω–Ω—ñ—Ö 10 –∑–∞–º–æ–≤–ª–µ–Ω—å",
            "‚¨Ö –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –º–µ–Ω—é",
        ]
        self.assertEqual(buttons, expected_buttons)

    def test_admin_check_comments_buttons(self):
        buttons = [
            button.text for row in Admin_check_comments.keyboard for button in row
        ]
        expected_buttons = [
            "–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ –∑–∞ 1 —Ç–∏–∂–¥–µ–Ω—å",
            "–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ –∑–∞ 1 –¥–µ–Ω—å",
            "‚¨Ö –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –º–µ–Ω—é",
        ]
        self.assertEqual(buttons, expected_buttons)

    def test_admin_bouquet_price_buttons(self):
        buttons = [
            button.text for row in Admin_bouquet_price.keyboard for button in row
        ]
        expected_buttons = [
            "101 flowers",
            "201 flowers",
            "301 flowers",
            "401 flowers",
            "501 flowers",
            "601 flowers",
            "701 flowers",
            "1001 flowers",
            "‚¨Ö –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –¥–æ –∫–≤—ñ—Ç—ñ–≤",
        ]
        self.assertEqual(buttons, expected_buttons)

    def test_admin_bouquet_photo_buttons(self):
        buttons = [
            button.text for row in Admin_bouquet_photo.keyboard for button in row
        ]
        expected_buttons = [
            "101 ros",
            "201 ros",
            "301 ros",
            "401 ros",
            "501 ros",
            "601 ros",
            "701 ros",
            "1001 ros",
            "Box photo",
            "‚¨Ö –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –º–µ–Ω—é",
        ]
        self.assertEqual(buttons, expected_buttons)

    def test_settings_buttons(self):
        self.assertIsInstance(Settings, ReplyKeyboardMarkup)
        buttons = []
        for row in Settings.keyboard:
            for item in row:
                if isinstance(item, KeyboardButton):
                    buttons.append(item.text)
                else:
                    buttons.append(item)
        self.assertIn("–ó–º—ñ–Ω–∏—Ç–∏ –º–æ–≤—É", buttons)
        self.assertIn("‚¨Ö –ù–∞–∑–∞–¥", buttons)

    def test_change_language_buttons(self):
        buttons = [button.text for row in change_language.keyboard for button in row]
        expected_buttons = ["üá∫üá∏ English", "üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞", "‚¨Ö –ù–∞–∑–∞–¥"]
        self.assertEqual(buttons, expected_buttons)

    def test_change_language_begin_buttons(self):
        buttons = [
            button.text for row in change_language_begin.keyboard for button in row
        ]
        expected_buttons = ["üá∫üá∏ English", "üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞"]
        self.assertEqual(buttons, expected_buttons)

    def test_last_agree_buttons(self):
        buttons = [button.text for row in last_agree.keyboard for button in row]
        expected_buttons = ["‚úÖ –¢–∞–∫", "‚ùå –ù—ñ"]
        self.assertEqual(buttons, expected_buttons)

    def test_keyboards_reply(self):
        self.assertIn("ukr", keyboards_reply)
        self.assertIn("eng", keyboards_reply)
        self.assertIn("start", keyboards_reply["ukr"])
        self.assertIn("location", keyboards_reply["ukr"])
        self.assertIn("start", keyboards_reply["eng"])
        self.assertIn("location", keyboards_reply["eng"])
